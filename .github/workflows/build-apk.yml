name: Build APK

on:
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/build-apk.yml'
      - '*.zip'
      - '**/*.zip'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Show repo contents (diagnostic)
        shell: bash
        run: |
          echo "PWD: $(pwd)"
          ls -la
          echo "ZIPs:"
          find . -type f -name '*.zip' -print || true

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 17

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android components
        shell: bash
        run: |
          sdkmanager --sdk_root="${ANDROID_SDK_ROOT}" \
            "platform-tools" "platforms;android-34" "build-tools;34.0.0"
          yes | sdkmanager --licenses

      - name: Pick newest ZIP and unzip
        shell: bash
        run: |
          set -e
          ZIP_PATH="$(find . -type f -name '*.zip' -printf '%T@ %p\n' | sort -nr | head -n1 | cut -d' ' -f2- || true)"
          [ -n "$ZIP_PATH" ] || { echo "::error::No ZIP found in repo root"; exit 1; }
          echo "Using ZIP: $ZIP_PATH"
          rm -rf workspace
          mkdir -p workspace
          unzip -q "$ZIP_PATH" -d workspace

          echo "After unzip (first 3 levels):"
          find workspace -maxdepth 3 -type d -print

          # Prefer folder that has gradlew
          PROJ_DIR="$(find workspace -maxdepth 6 -type f -name gradlew -printf '%h\n' | head -n1 || true)"

          # If only app/ exists, construct a root project
          if [ -z "$PROJ_DIR" ] && [ -d "workspace/app" ]; then
            echo "No gradlew found; constructing root around app/."
            cat > workspace/settings.gradle <<'EOF'
pluginManagement { repositories { google(); mavenCentral(); gradlePluginPortal() } }
dependencyResolutionManagement {
  repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)
  repositories { google(); mavenCentral() }
}
rootProject.name = "VampireDiariesEngine"
include(":app")
EOF
            cat > workspace/build.gradle <<'EOF'
allprojects { repositories { google(); mavenCentral() } }
EOF
            cat > workspace/gradle.properties <<'EOF'
org.gradle.jvmargs=-Xmx2g -Dfile.encoding=UTF-8
android.useAndroidX=true
EOF
            PROJ_DIR="workspace"
          fi

          # Fallback to settings.gradle location if needed
          if [ -z "$PROJ_DIR" ]; then
            PROJ_DIR="$(find workspace -maxdepth 6 -type f -name 'settings.gradle*' -printf '%h\n' | head -n1 || true)"
          fi

          [ -n "$PROJ_DIR" ] || { echo "::error::Project dir not found"; exit 2; }
          echo "Using project dir: $PROJ_DIR"
          echo "PROJ_DIR=$PROJ_DIR" >> "$GITHUB_ENV"

      - name: Ensure Gradle wrapper
        shell: bash
        run: |
          cd "$PROJ_DIR"
          if [ ! -f ./gradlew ]; then
            echo "Creating Gradle wrapperâ€¦"
            curl -sL https://services.gradle.org/distributions/gradle-8.7-bin.zip -o gradle.zip
            unzip -q gradle.zip -d "${RUNNER_TEMP}"
            "${RUNNER_TEMP}/gradle-8.7/bin/gradle" wrapper --gradle-version 8.7
          fi
          chmod +x ./gradlew
          ./gradlew --version

      - name: Build debug APK
        shell: bash
        run: |
          cd "$PROJ_DIR"
          ./gradlew --no-daemon --stacktrace assembleDebug

      - name: Locate APK
        shell: bash
        run: |
          APK_PATH="$(find "$PROJ_DIR" -type f -path "*/build/outputs/apk/*/*.apk" | head -n1 || true)"
          [ -n "$APK_PATH" ] || { echo "::error::APK not found under outputs/apk"; exit 3; }
          echo "Found APK at: $APK_PATH"
          echo "APK_PATH=$APK_PATH" >> "$GITHUB_ENV"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: ${{ env.APK_PATH }}
